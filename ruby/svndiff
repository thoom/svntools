#!/usr/bin/env ruby

def svn_diff(args, repository)
  colorizer = ''
  old       = ''
  otag      = ''
  new       = ''
  ntag      = ''
  page      = ''
  param     = ''
  patch     = ''
  revision  = ''

  debug    = false
  details  = false
  sumforce = false
  summary  = '--summarize'

  base   = repository[:base]
  trunk  = repository[:trunk]
  branch = repository[:branch]

  colorizer = get_config['colorizer'] if get_config.has_key? 'colorizer'

  params = {'-o' => 'old', '-n' => 'new', '-s' => 'sub', '-f' => 'file', '-d' => 'folder', '-r' => 'revision', '-c' => 'colorizer', '-a' => 'patch'}

  args.each do |item|
    if params.has_key? item
      param = params[item]
      next
    end

    val = item[2..-1]
    if params.has_value? val
      param = val
      next
    end

    case item
    when '--details'
      details = true
    when '--summary'
      sumforce = true
    when '--debug'
      debug = true
    else
      case param
      when 'colorizer'
        colorizer = item
      when 'file'
        page    = item
        details = true
      when 'folder'
        page = item
      when 'patch'
        details = true
        patch   = item
      when 'old'
        old = item
      when 'new'
        new = item
      when 'revision'
        revision = item
      when 'sub'
        page = item
        if item[-1, 1] != '/'
          details = true
        end
      else
        #do something?
      end
    end

    param = ''
  end

  added_header   = 'Added'
  deleted_header = 'Deleted'

  if revision.empty?
    if old.empty? || old == trunk
      otag = ''
      old  = "#{ trunk }/"
    else
      otag = "#{ old }/"
      old  = "#{ branch }/"
    end

    if new.empty? || new == trunk
      ntag = ''
      new  = "#{ trunk }/"
    else
      ntag = "#{ new }/"
      new  = "#{ branch }/"
    end

    o_path = "#{ old }#{ otag }#{ page }"
    n_path ="#{ new }#{ ntag }#{ page }"

    hpath = "#{ old }#{ otag }#{ page } #{ new }#{ ntag }#{ page }"

    path  = "#{ base }#{ o_path } #{ base }#{ n_path }"
    hpath = "#{ o_path } #{ n_path }"

  else
    if revision.include? ':'
      rev1, rev2 = revision.split(':')

      if rev1.to_i > rev2.to_i
        rev_old  = rev2
        rev_new  = rev1
        revision = rev_old + ':' + rev_new
      else
        rev_old = rev1
        rev_new = rev2
      end

    else
      rev_old = (revision.to_i - 1).to_s
      rev_new = revision.to_s

      revision = rev_old + ':' + revision
    end

    path  = "-r #{ revision } #{ base }#{ page }"
    hpath = "revision #{ revision } #{ page }"
  end

  if details == true && sumforce == false
    summary = ''

    if patch.empty?
      if colorizer.empty?
        %w(diffc colordiff).each do |colorer|
          output = `which #{ colorer } 2>&1`
          if output.empty?
            next
          end

          summary = "| #{ colorer }"
          break
        end
      else
        output = `which #{ colorizer } 2>&1`
        summary = "| #{ colorizer }" unless output.empty?
      end
    end
  end

  summary = '--summarize' if sumforce
  command  = "svn diff -x -w #{ path } #{ summary }"

  head = 'SVN diff ' + (summary.strip == '--summarize' ? 'summary' : 'details') + " for #{ hpath }"
  l    = '=' * (head.length + 2)
  s    = ' ' * (head.length + 2)
  puts "\n+#{ l }+\n|#{ s }|\n| #{ head } |\n|#{ s }|\n+#{ l }+"

  puts command if debug

  unless revision.empty?
    output = svn_diff_last_log "-r #{ rev_new } #{ base }"

    head = "Last commit message by #{ output[:user] } on " + output[:date].strftime("%b %d, %Y %I:%M %p")
    l    = '-' * head.length

    puts "\n#{ head }\n#{ l }#{ output[:line] }\n"
  end


  if summary != '--summarize'
    io = IO.popen "#{ command } 2>&1"
    puts "\n"
    unless patch.empty?
      file = File.open(patch, 'w')
    end

    while (line = io.gets)
      file.puts(line) unless patch.empty?

      puts line
    end

    unless patch.empty?
      file.close
      puts "Patch file saved to #{ patch }"
    end

    exit
  end

  output    = `#{ command } 2>&1`
  added     = []
  deleted   = []
  modified  = []
  mtype     = %w(M D A)
  pmodified = []
  maxlen    = 0

  output.each_line do |line|
    type = line[0, 1]
    prop = line[1, 1]
    file = line[2..-1].strip.sub(base + old + otag, '')

    case type
    when 'M'
      modified << file
    when 'D'
      deleted << file
    when 'A'
      added << file
    else
      #do something?
    end

    pmodified << file if prop == 'M'
    maxlen = file.length if maxlen < file.length
  end

  if added.empty? && modified.empty? && deleted.empty?
    puts 'No differences found'
  else
    l = '-' * (maxlen + 1)

    unless modified.empty?
      modified.sort!
      puts "\nModified\n#{ l }\n" + modified.join("\n")
    end

    unless added.empty?
      added.sort!
      puts "\n#{ added_header }\n#{ l }\n" + added.join("\n")
    end

    unless deleted.empty?
      deleted.sort!
      puts "\n#{ deleted_header }\n#{ l }\n" + deleted.join("\n")
    end

    unless pmodified.empty?
      pmodified.sort!
      header = 'SVN properties changed'
      puts "\n#{ header }\n#{ l }\n" + pmodified.join("\n")
    end
  end
end

def svn_diff_last_log(path)
  output = `svn log -l 1 #{ path }`

  @user     = ''
  @date     = ''
  @line     = ''
  @revision = ''

  output.each_line do |line|
    next if line[0, 1] == '-'

    if (line.start_with? 'r') && (line.include? '|')
      revision, user, date, trash = line.split('|')

      @revision = (revision.strip)[1..-1]
      @user     = user.strip
      @date     = DateTime.parse date[0..date.index('(')-1].strip
    else
      @line += line
    end
  end

  {:revision => @revision, :user => @user, :date => @date, :line => @line}
end

def svn_diff_help(command = 'svndiff')
  header = "#{ command } help"
  l      = '-' * header.length
  h      = "#{ header }\n#{ l }"
  puts <<-HELP

#{ h }

Compares differences between revisions or branches and the trunk.

param			description
-----			-----------
-c (--colorizer) XXXX	A diff coloring app like diffc, colordiff. If one of these exist, it will choose automatically. If specified, it will use the specified app.
-d (--folder) XXXX	A folder that should be compared (i.e. web/). Never sets --details flag.
-f (--file) XXXX	A file that should be compared (i.e. web/index.php). Sets --details flag automatically.
-o (--old) XXXX		The old branch that should be compared against. (i.e. --old sprint8). If missing, assumes trunk.
-n (--new) XXXX		The new branch that should be compared against. (i.e. --new sprint8-stage). If missing, assumes trunk.
-p (--repository) XXXX  Use the repository defined in the config file.
-r (--revision) XXXX	Compare the differences between revisions rather than branches (i.e. -r 10301 or -r 10200:10301). Sets the --details flag automatically.
-s (--sub) XXXX		A file (or folder) that should be compared (i.e. web/).
			If the param has a trailing forward slash, it is assumed that it is a folder. Otherwise it sets --details flag automatically.

--debug			Prints various debug statements
--details		Get the diff details instead of summary of all the changes.
--summary		Force summary mode.

examples
--------
To get a summary of changes between branches:
#{ command } -o sprint9 -n sprint10
#{ command } --old sprint9 --new sprint10

To get detailed changes for all files between branches:
#{ command } -o sprint9 -n sprint10 --details
#{ command } --old sprint9 --new sprint10 --details

To get a summary of changes between the trunk and a branch:
#{ command } --new sprint9
#{ command } --old trunk --new sprint9

To get detailed changes for a file between branches:
#{ command } --old sprint9 --new sprint10 --file lib/class/MyClass.php
#{ command } --old sprint9 --new sprint10 --sub lib/class/MyClass.php

To get a summary of changes between a sub folder between branches:
#{ command } --old sprint9 --new sprint10 --folder lib/class
#{ command } --old sprint9 --new sprint10 --folder lib/class/
#{ command } --old sprint9 --new sprint10 --sub lib/class/

To get a detailed view of changes between a sub folder between branches:
#{ command } --old sprint9 --new sprint10 --folder lib/class --details
#{ command } --old sprint9 --new sprint10 --folder lib/class/ --details
#{ command } --old sprint9 --new sprint10 --sub lib/class/ --details
#{ command } --old sprint9 --new sprint10 --sub lib/class (notice the lack of trailing forward slash)

To get a detailed view of changes between sequential revisions:
#{ command } -r 10301 (same as #{ command } -r 10300:10301)
#{ command } --revision 10301

To get a summary of changes between revisions:
#{ command } -r 10210:10301
#{ command } --revision 10210:10301

To get a detailed view of changes between revisions:
#{ command } --revision 10301 --details
  HELP
end


if __FILE__ == $0
  unless ARGV.empty?
    load File.dirname(__FILE__) + '/svntools'

    result     = parse_args ARGV
    args       = result[:args]
    repository = result[:repository]

    svn_diff(args, repository)
    exit
  end

  svn_diff_help
end
