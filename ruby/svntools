#!/usr/bin/env ruby

$config = ''

def get_config
  return $config unless $config.empty?

  require 'yaml'

  file_name = '.svntools.yml'
  if File.exists? file_name
    file = file_name
  else
    file = File.expand_path "~/#{ file_name }"

    raise "Configuration file #{ file } not found" unless File.exists? file
  end

  $config = YAML.load_file file
end

def parse_args(args)
  args            = args.dup
  repository_name = 'default'
  index           = args.index '--repository'

  index = args.index '-p' unless index

  if index && args.length > index + 1
    repository_name = args[index + 1]

    args.delete_at index
    args.delete_at index
  end

  config = get_config
  raise 'Configuration missing repositories section' unless config.has_key? 'repositories'

  config = config['repositories']
  if config.has_key? 'default'
    default = config['default']
    raise 'Default configuration missing \'base\' key' unless default.has_key? 'base'

    c_base   = default['base']
    c_trunk  = (default.has_key? 'trunk') ? default['trunk'] : 'trunk'
    c_branch = (default.has_key? 'branch') ? default['branch'] : 'branches'
  end

  if repository_name != 'default'
    raise "Configuration file missing repository '#{ repository_name }'" unless config.has_key? repository_name

    repository = config[repository_name]
    c_base = repository['base'] if repository.has_key? 'base'
    c_trunk = repository['trunk'] if repository.has_key? 'trunk'
    c_branch = repository['branch'] if repository.has_key? 'branch'
  end

  c_base += '/' unless c_base[-1, 1] == '/'

  {:args => args, :repository => {:base => c_base, :trunk => c_trunk, :branch => c_branch}}
end

def svn_tools_help
  puts <<-HELP

svntools help
-------------

command           description
-------           -----------
help {command}    Brings up help documentation for the specific command
diff              Provides diff between revisions, branches, trunk, etc
switch            Switch the svn repository for the current working copy
merge             Merge the repository on to the working copy

param                   description
-----                   -----------
-p (--repository)	XXXX  Use the repository defined in the config file.
--debug                 Prints various debug statementss


examples
--------
svntools diff       Same as svndiff
svntools help diff  Displays the svndiff help

  HELP
end


if __FILE__ == $0
  unless ARGV.empty?
    load File.dirname(__FILE__) + '/svndiff'
    load File.dirname(__FILE__) +'/svnswitch'
    load File.dirname(__FILE__) +'/svnmerge'

    if ARGV[0] == 'help'
      case ARGV[1]
      when 'diff'
        svn_diff_help 'svntools diff'
      when 'switch'
        svn_switch_help 'svntools switch'
      when 'merge'
        svn_merge_help 'svntools merge'
      else
        svn_tools_help
      end
    elsif %w(diff switch merge).index ARGV[0]
      result     = parse_args ARGV
      args       = result[:args]
      repository = result[:repository]

      case args.shift
      when 'diff'
        svn_diff(args, repository)
      when 'merge'
        svn_merge(args, repository)
      when 'switch'
        svn_switch(args, repository)
      else
        # we'll never hit this
        raise 'How the heck did you get here?'
      end

    else
      raise "Invalid argument #{ ARGV[0] }. Execute " + __FILE__ + ' without parameters to see accepted arguments'
    end
    exit
  end

  svn_tools_help
end
